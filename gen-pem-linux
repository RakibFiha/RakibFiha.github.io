#!/bin/bash

## This script may be run on sapphire to generate pem files to AWS
## You can give a hostname and it will generate a pem file for you
## After that it will create a instance and route53

--version()
{
    printf "gen-pem 0.0.1\n"
}

## AWS configurations are saved locally on sapphire ubuntu or macos

arg=$1
shift

## Installing dependencies

## Linux
command -v jq > /dev/null 2>&1
if [ $? -ne 0 ]; then
    if [ "$(uname)" == "Linux" ]; then
        sudo apt-get update && sudo apt install jq -y;
    fi
fi
host 8.8.8.8 > /dev/null 2>&1
if [ $? -ne 0 ]; then
    if [ "$(uname)" == "Linux" ]; then
        sudo apt-get update && sudo apt install dnsutils -y;
    fi
fi

## global variable
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
ami_config_path=$HOME/.amiconfig.json
if [ ! -f $ami_config_path ]; then
    printf "amiconfig does not exist..."
fi

variable_declaration()
{

    echo "Current gen-pem configuration is set as follows: "
    ami_id=$(cat $ami_config_path | jq -r '.ami_id'); echo $ami_id
    launch_wizard=$(cat $ami_config_path | jq -r '.launch_wizard'); echo $launch_wizard
    aws_pem_dir=$(cat $ami_config_path | jq -r '.aws_pem_dir'); echo $aws_pem_dir
    instance_type=$(cat $ami_config_path | jq -r '.instance_type'); echo $instance_type
    prefix=$(cat $ami_config_path | jq -r '.prefix'); echo $prefix
    domain=$(cat $ami_config_path | jq -r '.domain'); echo $domain
    hosted_zone_id=$(cat $ami_config_path | jq -r '.hosted_zone_id'); echo $hosted_zone_id

}

show()
{
    echo \
    "
    'gen-pem show-config' to see ami-configuration
    'gen-pem show-ami' to see ami-id
    'gen-pem show-launch-wizard' to see launch-wizard code
    'gen-pem show-pem-dir' to see current pem directory
    'gen-pem show-instance-type' to see AWS instance type
    'gen-pem show-prefix' to see the domain name prefix
    'gen-pem show-domain' to see your registered domain
    'gen-pem show-hostedzoneid' to see your AWS hosted zone id
    "
}

show-config()
{
    # variable_declaration;
    cat $ami_config_path | jq;
}

show-ami()
{
    # variable_declaration;
    show=$(cat $ami_config_path | jq -r '.ami_id');
    echo $show;
}

show-launchwizard()
{
    # variable_declaration;
    show=$(cat $ami_config_path | jq -r '.launch_wizard');
    echo $show;
}

show-pemdir()
{
    # variable_declaration;
    show=$(cat $ami_config_path | jq -r '.aws_pem_dir');
    echo $show;
}

show-instancetype()
{
    show=$(cat $ami_config_path | jq -r '.instance_type');
    echo $show;
}

show-prefix()
{
    show=$(cat $ami_config_path | jq -r '.prefix');
    echo $show
}

show-domain()
{
    show=$(cat $ami_config_path | jq -r '.domain');
    echo $show;
}

show-hostedzoneid()
{
    show=$(cat $ami_config_path | jq -r '.hosted_zone_id');
    echo $show;
}

help()
{
    echo \
    "
    gen-pem:
    gen-pem let you generate pem files for your AWS instance.
    You can also register domain for your hostname via route53.
    Now available on both MacOS and Linux...
    Will be available soon on git...
    "
command -v aws > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo \
    "
    Prerequisites:
    It is recommended that you install aws-cli first.
    If it is missing then we will install it for you.
    However, please make sure that you have AWS credentials with you.
    After the installation of aws-cli:
    Please enter AWS Access Key ID and AWS Secret Access Key by doing:
    'aws configure'
    Please make sure to enter them correctly.
    "

else
    echo \
    "
    Prerequisites:
    aws-cli is already installed. Current aws-cli version is $aws_version"
    aws_version=$(aws --version);

    if [ ! -f $HOME/.aws/config ]; then
    echo \
    "
    AWS Configuration:
    You have not configured aws-cli yet...
    Please configure it by:
    'aws-configure'
    "

    else
    region=$(cat $HOME/.aws/config | grep region | cut -d '=' -f2 | tr -d ' ');
    echo \
    "
    AWS Configuration:
    aws-cli had been configured before.
    Default AWS region is set as $region
    "
    fi

fi

    echo \
    "
    Command example:
    To generate a new pem file do 'gen-pem new'
    To see your configuration do 'gen-pem show'
    To see your current ami configuration do 'gen-pem show-config'
    To launch a new AWS instance do 'gen-pem new'
    To register domain via route53 do 'gen-pem new'
    To see existing pem files do 'gen-pem list'
    To edit your current ami configuration do 'gen-pem configure'

    To inquire contact Rakib Fiha at mrahman06@qub.ac.uk
    "

}

config_template()
{
    if [ ! -f $ami_config_path ]; then
        cp $DIR/amiconfig.json $ami_config_path
    fi
    old_amid=$(cat $ami_config_path | jq -r '.ami_id')
    old_launch_wizard=$(cat $ami_config_path | jq -r '.launch_wizard')
    old_instance_type=$(cat $ami_config_path | jq -r '.instance_type')
    old_prefix=$(cat $ami_config_path | jq -r '.prefix')
    old_domain=$(cat $ami_config_path | jq -r '.domain')
    old_hosted_zone_id=$(cat $ami_config_path | jq -r '.hosted_zone_id')
    old_aws_pem_dir=$(cat $ami_config_path | jq -r '.aws_pem_dir')

    read -e -p "Please enter new ami-id: [Existing: $old_amid] " -i "$old_amid" new_amid
    # read -p "Please enter new ami-id: (Existing: $old_amid)" new_amid
    # new_amid=${name:-$old_amid}
    read -e -p "Please enter new launch wizard: [Existing: $old_launch_wizard] " -i "$old_launch_wizard" new_launch_wizard

    read -e -p "Please enter instance_type: [Existing: $old_instance_type] " -i "$old_instance_type" new_instance_type

    read -e -p "Please enter domain prefix: [Existing: $old_prefix] " -i "$old_prefix" new_prefix

    read -e -p "Please enter your domain name: [Existing: $old_domain] " -i "$old_domain" new_domain

    read -e -p "Please enter pem directory: [Existing: $old_hosted_zone_id] " -i "$old_hosted_zone_id" new_hosted_zone_id

    read -e -p "Please enter pem directory: [Existing: $old_aws_pem_dir] " -i "$old_aws_pem_dir" new_aws_pem_dir

    # jq '.name |= "$new_amid"' $ami_config_path | tee $ami_config_path

    cp $ami_config_path $ami_config_path.tmp
    jq --arg key1 "$new_amid" --arg key2 "$new_launch_wizard" --arg key3 "$new_instance_type" --arg key4 "$new_prefix" --arg key5 "$new_domain" --arg key6 "$new_hosted_zone_id" --arg key7 "$new_aws_pem_dir" '.ami_id = $key1 | .launch_wizard = $key2 | .instance_type = $key3 | .prefix = $key4 | .domain = $key5 | .hosted_zone_id = $key6 | .aws_pem_dir = $key7' $ami_config_path.tmp >$ami_config_path;
    cp $ami_config_path.tmp $ami_config_path.templaate;
    rm $ami_config_path.tmp;
    echo \
    "Your ami configuration looks like the following: "
    cat $ami_config_path | jq;

}

configure()
{
    echo "Now configuring your aws settings..."
    download_url=url_to_download_config
    if [ ! -f $ami_config_path ]; then
        if [ -f $DIR/amiconfig.json ]; then
            echo "Configuring aws amiconfig now..."
            config_template;
        else
            echo "Trying to download missing files..."
        fi
    else
        echo "amiconfig already exists..."
        echo "Checking for reconfiguration..."
        config_template;
    fi

}

lists()
{
    variable_declaration;
    echo \
    "
    Checking existing pem directories...
    "
    ls "$aws_pem_dir" | grep $prefix
}

gen_pem_file()
{
    ## create new pem file
    mkdir -p $pem_hostname_dir;
    cd $pem_hostname_dir && aws ec2 create-key-pair --key-name $pem_name --query 'KeyMaterial' --output text > $pem_name.pem
}

launch_instance()
{
    ## create new instance with the pem file
    cd $pem_hostname_dir && aws ec2 run-instances --image-id $ami_id --count 1 --instance-type $instance_type --key-name $pem_name --security-groups $launch_wizard >> $prefix_"$pem_hostname"_instance.json

}

register_route53()
{
    printf "Checking if registered as an FQDN...\n"
    aws route53 change-resource-record-sets --hosted-zone-id Z314KZYVYMCC5R --change-batch file:///home/mehedi/r53_test.json
    host $register_fqdn > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            printf "Your hostname $pem_hostname is not registered...\n"
        else
            printf "Your hostname $pem_hostname is already registered to the network...\n"
            echo "Please enter a different hostname..."
        fi
}

new()
{

variable_declaration;

if [ -f $ami_config_path ]; then

    mkdir -p $aws_pem_dir;

    read -p "Enter a hostname to generate a new pem file: " pem_hostname
    pem_hostname_dir=$aws_pem_dir/$prefix\_$pem_hostname;
    pem_hostname_path=$pem_hostname_dir/$prefix\_$pem_hostname.pem;
    pem_instance=$pem_hostname_dir/$prefix\_$pem_hostname\_instance.json;
    pem_name=$prefix\_$pem_hostname;
    register_fqdn="$prefix$pem_hostname.$domain"

    echo "Pem path is $pem_hostname_path"
    echo "Instance path is $pem_instance"

    echo "Your new pem file hostname is $pem_hostname"
    echo "Pem file name and directory will be $pem_name"
    echo "This [ $register_fqdn ] FQDN will be registered..."
    echo "Checking existing directory now..."
else
    echo "Amiconfig is not found..."
    echo "Please configure your settings by 'gen-pem configure'"
    exit 0
fi

command -v aws > /dev/null 2>&1;
if [ $? -eq 0 ]; then

    if [ -d "$pem_hostname_dir" ]; then
        printf "Pem directory exists for $pem_hostname... " && echo "Checking if pem file exists or not..."

        if [ -f "$pem_hostname_path" ]; then
            echo "A pem file for $pem_hostname had been already issued before..."
            printf "Checking if instances with $pem_hostname were launched before...\n"

                if [ -f $pem_instance ]; then
                    printf "There is already an instance with that pem file wtih hostname $pem_hostname...\n"
                else
                    printf "No instance is found with corresponding pem file with hostname $pem_hostname...\n" && echo

                        read -p "Do you want to launch a new instance for the existing pem file of hostname $pem_hostname? (y/n) " -n 1 -r
                        echo    # (optional) move to a new line
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            echo "Launching new instance..."
                            # do dangerous stuff
                        else
                            echo "You dont want to launch a new instance..."
                            echo "Exiting..."
                            exit 0
                        fi
                fi

            register_route53;

            else
            echo "Pem file does not exist for $pem_hostname..."
            # gen_pem_file;
            # launch_instance;

        fi
    else
        echo "Pem directory does not exist for $pem_hostname..."
        # gen_pem_file;
        # launch_instance;
    fi

fi

}

## Calling functions one by one...
main()
{

case $arg in
    new)
        new ;;
    help)
        help ;;
    show)
        show ;;
    show-config)
        show-config ;;
    show-ami)
        show-ami ;;
    show-launch-wizard)
        show-launch-wizard ;;
    show-pem-dir)
        show-pem-dir ;;
    show-instance-type)
        show-instance-type ;;
    show-prefix)
        show-prefix ;;
    show-domain)
        show-domain ;;
    show-hostedzoneid)
        show-hostedzoneid ;;
    configure)
        configure ;;
    --version)
        --version ;;
    lists)
        lists ;;
    *)
        printf 'Invalid sub-command: %s\n' "$arg" >&2
        printf "Please try 'gen-pem help' for more info\n"
        printf 'Error code: 1\n'
        exit 1
esac
}

main;

